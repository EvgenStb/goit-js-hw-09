{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAYC,SAASC,cAAc,QAEzC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAS,CAACC,EAASC,KAC5BC,YAAW,KACaC,KAAKC,SAAW,GAEtCJ,EAAS,C,SAACH,E,MAAUC,IAEpBG,EAAQ,C,SAACJ,E,MAAUC,GAAO,GAEzBA,EAAM,G,CAuBb,SAASO,GAAQR,SAAEA,EAAQC,MAAEA,IAC3BP,EAAAe,OAAOC,QAAQ,sBAAoBV,QAAiBC,M,CAGtD,SAASU,GAAUX,SAAEA,EAAQC,MAAEA,IAC7BP,EAAAe,OAAOG,QAAQ,uBAAqBZ,QAAiBC,M,CAGvDL,EAAUiB,iBAAiB,UA1B3B,SAA2BC,GACzBC,EAAEC,iBACF,MAAMC,EAAY,IAAIC,SAASJ,EAAMK,eAC/BC,EAAS,GAEf,IAAK,MAAOC,EAAKC,KAAUL,EAAUM,UACnCH,EAAOC,GAAOG,OAAOF,GAGvB,IAAIG,OAAEA,EAAMC,KAAEA,EAAIzB,MAAEA,GAAUmB,EAE9B,IAAK,IAAIO,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAC/B5B,EAAc4B,EAAG1B,GAAO2B,KAAKjB,GAAWkB,MAAMrB,GAC/CP,GAASyB,EACT9B,EAAUkC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix, { Notify } from 'notiflix';\n\nconst inputForm = document.querySelector('form')\n\nfunction createPromise(position, delay) {\n  return new Promise ((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve ({position, delay})\n    } else {\n      reject ({position, delay})\n    }\n    }, delay);\n  })\n}\n\n \nfunction runCreatePromises(event) {\n  e.preventDefault();\n  const inputData = new FormData(event.currentTarget);\n  const option = {};\n\n  for (const [key, value] of inputData.entries()) {\n    option[key] = Number(value);\n  }\n\n  let { amount, step, delay } = option;\n\n  for (let i = 1; i <= amount; i += 1) {\n     createPromise(i, delay).then(onSuccess).catch(onError);\n    delay += step;\n    inputForm.reset();\n  }\n}\n\nfunction onError({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction onSuccess({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\ninputForm.addEventListener('submit',runCreatePromises)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const promisesProperty = {\n//   delay: \"\",\n//   step:\"\",\n//   amount:\"\"\n// // }\n// // // let delay = 0;\n// // // let step = 0;\n// // // let amount = 0;\n// inputForm.addEventListener('input', checkProperty)\n\n// function checkProperty(event){\n//   promisesProperty[event.target.name] = event.target.value;\n//   return promisesProperty;\n// }\n// console.log(promisesProperty)\n// // let {delay, step, amount} = promisesProperty\n\n// // createPromiseBtn.addEventListener('submit', submitProperty)\n// // function submitProperty() {\n// //   preventDefault();\n  \n// //   console.log(promisesProperty)\n// //   // console.log(step)\n// //   // console.log(amount)\n\n// // }\n// // console.log(promisesProperty) \n\n\n\n\n// const createPromise = (event) => {\n//   event.preventDefault()\n//     setTimeout(() => {\n//       return new Promise ((resolve, reject) => {\n//         const shouldResolve = Math.random() > 0.3;\n//           if (shouldResolve) {\n//            resolve (`✅ Fulfilled promise ${position} in ${delay}ms`)\n//           } else \n//           reject ((`❌ Rejected promise ${position} in ${delay}ms`))\n//     }\n//      ,delay)\n//      position +=1\n//      delay +=step\n//   })\n\n//   createPromise ()\n//   .then( result => Notify.success(result))\n//   .catch(error => Notify.failure(error))\n//   createPromiseBtn.addEventListener('submit', createPromise)\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$inputForm","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$onError","Notify","failure","$47d4ff9957288465$var$onSuccess","success","addEventListener","event","e","preventDefault","inputData","FormData","currentTarget","option","key","value","entries","Number","amount","step","i","then","catch","reset"],"version":3,"file":"03-promises.01354264.js.map"}